/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.adtg;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.springframework.scheduling.config.Task;

import edu.duke.adtg.domain.*;

public class TaskProcessor {
    private final ExecutorService executor;
    private DAOConn conn = new DAOConn();
    private GradeRequestDAO gradeRequestDAO = new GradeRequestDAO(conn);
    private Integer sleepTime;
    
    public TaskProcessor(Integer sleepTime) {
        int cores = Runtime.getRuntime().availableProcessors();
        // System.out.println("Number of cores: " + cores);
        this.executor = Executors.newFixedThreadPool(cores);
        this.sleepTime = sleepTime;
    }
    /**
     * Starts a single thread that continuously processes pending grade requests.
     * This method creates a connection to the database and retrieves all pending grade requests.
     * It then updates the status of each grade request to "IN PROGRESS" and processes the request.
     * After processing each request, the thread sleeps for a specified amount of time.
     */
    public void startOneThread() {
        // Create a connection to the database
        while (true) {
            try {
                // Get all pending grade requests
                List<GradeRequest> gradeRequests = gradeRequestDAO.listGradeRequestByStatus("PENDING");
            
                for (GradeRequest gradeRequest : gradeRequests) {
                    processRequest(gradeRequest, conn, "TaskProcessor");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                TimeUnit.SECONDS.sleep(sleepTime);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
    /**
     * Starts multiple threads to process grade requests.
     * 
     * This method continuously retrieves pending grade requests from the database and processes them
     * in separate threads. Each grade request is updated to "IN PROGRESS" status before processing.
     * 
     * @throws InterruptedException if the thread is interrupted while sleeping
     */
    public void startMultipleThreads() {
        // Create a connection to the database
        
        while (true) {
        
            List<GradeRequest> gradeRequests = new ArrayList<>();
            try {
                // Get all pending grade requests
                gradeRequests = gradeRequestDAO.listGradeRequestByStatus("PENDING");
            } catch (Exception e) {
                e.printStackTrace();
            }
            
                
            for (GradeRequest gradeRequest : gradeRequests) {
                executor.submit(() -> {
                    String owner = Thread.currentThread().getName();
                    processRequest(gradeRequest, conn, owner);
                });
            }
        
            try {
                TimeUnit.SECONDS.sleep(sleepTime);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            
        }
        
       
    }
    /**
     * Processes the given grade request.
     *
     * @param request the grade request to process
     * @param conn the DAO connection to use for processing
     * @param owner the owner of the grade request
     */
    private void processRequest(GradeRequest request, DAOConn conn, String owner) {
        try {
            System.out.println("Grading Request: " + request.toString());
            gradeRequestDAO.updateGradeRequest(request, "IN PROGRESS", owner, "Processing the request");
            Grader grader = new Grader(request, conn, owner);
            grader.mainFunction();
        } catch (Exception e) {
            // Handle the exception
            e.printStackTrace();
        }
    }
}
